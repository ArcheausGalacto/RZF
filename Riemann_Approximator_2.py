import mpmath as mp
import numpy as np
from fractions import Fraction
from numpy.polynomial.chebyshev import chebval

mp.mp.prec = 200

T = 50
N = 82  # Based on your updated coefficient count

# Updated coefficients from your latest output:
# We'll store them as Fractions for exactness
coeffs_fraction = [
Fraction(358715862521833,10000000000000000),
Fraction(33889974245037,50000000000000000000000000000),
Fraction(-353309139856991,5000000000000000),
Fraction(342331969034077,500000000000000000000000000000),
Fraction(675020084808101,10000000000000000),
Fraction(337366768470783,500000000000000000000000000000),
Fraction(-625079918488203,10000000000000000),
Fraction(140846545949521,200000000000000000000000000000),
Fraction(560594633199407,10000000000000000),
Fraction(17525011610779,25000000000000000000000000000),
Fraction(-243160938277063,5000000000000000),
Fraction(43161728341949,62500000000000000000000000000),
Fraction(407474834498321,10000000000000000),
Fraction(27436570112737,40000000000000000000000000000),
Fraction(-164581346164089,5000000000000000),
Fraction(172626257716581,250000000000000000000000000000),
Fraction(127927061367213,5000000000000000),
Fraction(41419072665559,62500000000000000000000000000),
Fraction(-95473890431839,5000000000000000),
Fraction(119536724443179,200000000000000000000000000000),
Fraction(34130175873923,2500000000000000),
Fraction(574426823127857,1000000000000000000000000000000),
Fraction(-932922375409689,100000000000000000),
Fraction(151331908364197,250000000000000000000000000000),
Fraction(607949268453919,100000000000000000),
Fraction(298135124068531,500000000000000000000000000000),
Fraction(-23561258372447,6250000000000000),
Fraction(296261376503733,500000000000000000000000000000),
Fraction(216784536833,97656250000000),
Fraction(29933297801889,50000000000000000000000000000),
Fraction(-30979204430021,25000000000000000),
Fraction(592343103765079,1000000000000000000000000000000),
Fraction(654765074009689,1000000000000000000),
Fraction(562267757084981,1000000000000000000000000000000),
Fraction(-10222284602291,31250000000000000),
Fraction(290418714779327,500000000000000000000000000000),
Fraction(30878115440231,200000000000000000),
Fraction(571387357629767,1000000000000000000000000000000),
Fraction(-68810464103419,1000000000000000000),
Fraction(282993140625233,500000000000000000000000000000),
Fraction(11582376453977,400000000000000000),
Fraction(545359912638651,1000000000000000000000000000000),
Fraction(-115062360743703,10000000000000000000),
Fraction(252937119243237,500000000000000000000000000000),
Fraction(215964140471927,50000000000000000000),
Fraction(500595201630219,1000000000000000000000000000000),
Fraction(-76630709934743,50000000000000000000),
Fraction(478159388201411,1000000000000000000000000000000),
Fraction(64304198830191,125000000000000000000),
Fraction(29772975371551,62500000000000000000000000000),
Fraction(-4087236542511,25000000000000000000),
Fraction(231219400821871,500000000000000000000000000000),
Fraction(61553815804647,1250000000000000000000),
Fraction(463787015048379,1000000000000000000000000000000),
Fraction(-70359933621581,5000000000000000000000),
Fraction(451992800863051,1000000000000000000000000000000),
Fraction(954864230011,250000000000000000000),
Fraction(427886695236729,1000000000000000000000000000000),
Fraction(-985766073762093,1000000000000000000000000),
Fraction(405812041323671,1000000000000000000000000000000),
Fraction(30274879868001,125000000000000000000000),
Fraction(374336237366207,1000000000000000000000000000000),
Fraction(-4536968901467,80000000000000000000000),
Fraction(43545090008077,125000000000000000000000000000),
Fraction(126719428192733,10000000000000000000000000),
Fraction(171616600471081,500000000000000000000000000000),
Fraction(-135155124052341,50000000000000000000000000),
Fraction(324533976054513,1000000000000000000000000000000),
Fraction(552738397938977,1000000000000000000000000000),
Fraction(15892878909721,50000000000000000000000000000),
Fraction(-4278383355423,40000000000000000000000000),
Fraction(310942184574851,1000000000000000000000000000000),
Fraction(209282119218203,10000000000000000000000000000),
Fraction(71527718580473,250000000000000000000000000000),
Fraction(-297676277918017,100000000000000000000000000000),
Fraction(49940864933603,200000000000000000000000000000),
Fraction(116602821613193,100000000000000000000000000000),
Fraction(5188482059899,25000000000000000000000000000),
Fraction(317647003011427,1000000000000000000000000000000),
Fraction(178142033505427,1000000000000000000000000000000),
Fraction(71451941779429,250000000000000000000000000000),
Fraction(994134895361,7812500000000000000000000000)
]

coeffs_float = [float(cf) for cf in coeffs_fraction]

def approx_xi(t):
    u = t/T
    val = chebval(u, coeffs_float)
    return val

def find_zeros_fast(interval=(-50,50), coarse_step=1.0):
    zeros = []
    t_min, t_max = interval
    t = t_min
    prev_val = approx_xi(t)
    t += coarse_step
    while t <= t_max:
        val = approx_xi(t)
        if prev_val*val < 0:
            zero_t = mp.findroot(approx_xi, [t - coarse_step, t])
            zeros.append(zero_t)
        prev_val = val
        t += coarse_step
    return zeros

def known_zeros_in_range(interval=(-50,50)):
    t_min, t_max = interval
    n = 1
    known = []
    while True:
        z = mp.zetazero(n)
        gamma_n = mp.im(z)  # imaginary part of zero s = 1/2 + i*gamma_n
        if gamma_n > t_max:
            break
        if gamma_n >= t_min:
            known.append(gamma_n)
        n += 1
        if gamma_n > t_max + 100: # safety check
            break
    return known

if __name__ == "__main__":
    interval = (0,400)
    zeros_found = find_zeros_fast(interval=interval, coarse_step=1.0)
    known = known_zeros_in_range(interval=interval)

    print("Approximate zeros found:", zeros_found)
    print("Known zeros in range:", known)

    for approx_z in zeros_found:
        if known:
            diffs = [abs(approx_z - kz) for kz in known]
            min_diff = min(diffs)
            closest_known = known[diffs.index(min_diff)]
            print(f"Approx Zero: {approx_z}, Closest Known: {closest_known}, Diff: {min_diff}")
        else:
            print(f"Approx Zero: {approx_z}, No known zeros in range to compare.")
